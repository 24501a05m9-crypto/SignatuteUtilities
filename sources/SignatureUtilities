module hemanth_addr::signature_utils {
    use std::vector;
    use std::signer;
    use aptos_framework::account;
    use aptos_std::ed25519;
    use aptos_std::multi_ed25519;

    
    const E_INVALID_SIGNATURE: u64 = 1;
    const E_INVALID_PUBLIC_KEY: u64 = 2;

    
    struct SignatureData has key, store {
        message: vector<u8>,
        signature: vector<u8>,
        public_key: vector<u8>,
        is_verified: bool,
    }

    
    public fun store_signature_data(
        account: &signer,
        message: vector<u8>,
        signature: vector<u8>,
        public_key: vector<u8>
    ) {
        let account_addr = signer::address_of(account);
        
       
        let is_valid = verify_ed25519_signature(
            &message,
            &public_key,
            &signature
        );

        let sig_data = SignatureData {
            message,
            signature,
            public_key,
            is_verified: is_valid,
        };

       
        if (exists<SignatureData>(account_addr)) {
            let stored_data = borrow_global_mut<SignatureData>(account_addr);
            *stored_data = sig_data;
        } else {
            move_to(account, sig_data);
        }
    }

    
    public fun verify_signature_data(account_addr: address): bool acquires SignatureData {
        assert!(exists<SignatureData>(account_addr), E_INVALID_SIGNATURE);
        
        let sig_data = borrow_global<SignatureData>(account_addr);
        
        
        verify_ed25519_signature(
            &sig_data.message,
            &sig_data.public_key,
            &sig_data.signature
        )
    }

   
    fun verify_ed25519_signature(
        message: &vector<u8>,
        public_key: &vector<u8>,
        signature: &vector<u8>
    ): bool {
        let pk = ed25519::new_unvalidated_public_key_from_bytes(*public_key);
        let sig = ed25519::new_signature_from_bytes(*signature);
        ed25519::signature_verify_strict(&sig, &pk, *message)
    }

}
